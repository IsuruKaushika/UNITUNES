import React, { useEffect, useState, useCallback } from "react";
import {
  View,
  Text,
  TextInput,
  Image,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  Alert,
  ActivityIndicator,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import AsyncStorage from "@react-native-async-storage/async-storage";

const backendUrl = "https://unitunes-backend.vercel.app"; // your backend URL

const HomePage = () => {
  const navigation = useNavigation();
  const [loggedIn, setLoggedIn] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [ads, setAds] = useState<string[]>([]);
  const [loadingAds, setLoadingAds] = useState(true);

  // User display data
  const [userName, setUserName] = useState<string | null>(null);
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const [userInitial, setUserInitial] = useState<string>("U");
  const [showUserMenu, setShowUserMenu] = useState(false);

  const stringToColor = (str: string) => {
    // Deterministic pastel-ish color
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
      hash |= 0;
    }
    const hue = Math.abs(hash) % 360;
    return `hsl(${hue}, 70%, 50%)`;
  };

  const computeInitial = (name?: string | null, email?: string | null) => {
    const n = (name || "").trim();
    if (n) return n.charAt(0).toUpperCase();
    const e = (email || "").trim();
    if (e) return e.charAt(0).toUpperCase();
    return "U";
  };

  // ✅ Check login status and load user display info
  const checkLogin = useCallback(async () => {
    const status = await AsyncStorage.getItem("loggedIn");
    const isLogged = status === "true";
    setLoggedIn(isLogged);

    if (isLogged) {
      // Try multiple keys to be robust with whatever your login flow stores
      const [
        nameFromStore,
        goodName,
        fullName,
        emailFromStore,
        userEmailStore,
      ] = await Promise.all([
        AsyncStorage.getItem("userName"),
        AsyncStorage.getItem("goodName"),
        AsyncStorage.getItem("fullName"),
        AsyncStorage.getItem("email"),
        AsyncStorage.getItem("userEmail"),
      ]);

      const name =
        nameFromStore ||
        goodName ||
        fullName ||
        null;

      const email = userEmailStore || emailFromStore || null;

      setUserName(name);
      setUserEmail(email);
      setUserInitial(computeInitial(name, email));
    } else {
      setUserName(null);
      setUserEmail(null);
      setUserInitial("U");
    }
  }, []);

  useEffect(() => {
    checkLogin();
  }, [checkLogin]);

  // Re-check when coming back to this screen
  useEffect(() => {
    const unsubscribe = navigation.addListener("focus", () => {
      checkLogin();
    });
    return unsubscribe;
  }, [navigation, checkLogin]);

  // ✅ Fetch ads from backend
  useEffect(() => {
    const fetchAds = async () => {
      try {
        const response = await fetch(`${backendUrl}/api/ad/list`); // Adjust endpoint as needed
        const data = await response.json();
        if (data && Array.isArray(data.ads)) {
          setAds(data.ads); // expecting { ads: [url1, url2, ...] }
        } else {
          console.warn("Ads data invalid:", data);
        }
      } catch (err) {
        console.error("Error fetching ads:", err);
      } finally {
        setLoadingAds(false);
      }
    };
    fetchAds();
  }, []);

  const features = [
    { name: "Boarding", icon: require("../../assets/images/Bording.jpg"), route: "BoardingList" },
    { name: "Taxies", icon: require("../../assets/images/Taxi.jpg"), route: "Three Wheel" },
    { name: "Medicare", icon: require("../../assets/images/Medicine.jpg"), route: "MedicalCenterList" },
    { name: "Shops & Delivery Services", icon: require("../../assets/images/Food.jpg"), route: "Food" },
    { name: "Renting", icon: require("../../assets/images/Rental.jpg"), route: "RentItemList" },
    { name: "Skill Sharing", icon: require("../../assets/images/Skill Sharing.jpg"), route: "SkillSharing" },
  ];

  // ✅ Search handling
  const handleSearch = () => {
    const query = searchQuery.toLowerCase();
    if (query.includes("boarding")) navigation.navigate("BoardingList");
    else if (query.includes("travel") || query.includes("taxi") || query.includes("three wheel"))
      navigation.navigate("Three Wheel");
    else if (query.includes("skill")) navigation.navigate("SkillSharing");
    else if (
      query.includes("medical") ||
      query.includes("doctor") ||
      query.includes("medicine") ||
      query.includes("pharmacy")
    )
      navigation.navigate("MedicalCenterList");
    else if (query.includes("food") || query.includes("stationery") || query.includes("glossary"))
      navigation.navigate("Food");
    else if (query.includes("rent") || query.includes("items") || query.includes("share"))
      navigation.navigate("RentItemList");
    else Alert.alert("Not Found", "No matching feature found for your search.");
  };

  const handleLogout = async () => {
    try {
      await AsyncStorage.multiRemove([
        "loggedIn",
        "userRole",
        "userName",
        "goodName",
        "fullName",
        "email",
        "userEmail",
        "token",
      ]);
      setLoggedIn(false);
      setUserName(null);
      setUserEmail(null);
      setUserInitial("U");
      setShowUserMenu(false);
      Alert.alert("Logged out", "You have been signed out.");
    } catch (err) {
      console.error("Logout error:", err);
      Alert.alert("Error", "Something went wrong while logging out.");
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      {/* User menu overlay and dropdown (only when logged in) */}
      {loggedIn && showUserMenu && (
        <>
          <TouchableOpacity
            style={styles.menuOverlay}
            activeOpacity={1}
            onPress={() => setShowUserMenu(false)}
          />
          <View style={styles.userMenu}>
            <Text style={styles.userMenuTitle}>
              {userName || userEmail || "Signed in"}
            </Text>
            <TouchableOpacity style={styles.userMenuItem} onPress={handleLogout}>
              <Ionicons name="log-out-outline" size={20} color="#d00" style={{ marginRight: 8 }} />
              <Text style={styles.userMenuItemText}>Logout</Text>
            </TouchableOpacity>
          </View>
        </>
      )}

      <ScrollView
        contentContainerStyle={[
          styles.container,
          !loggedIn && { backgroundColor: "#dcdcdc" }, // gray background if not logged in
        ]}
      >
        {/* Header */}
        <View style={styles.header}>
          <Ionicons name="menu" size={28} color="black" />
          <View style={styles.searchContainer}>
            <Ionicons name="search" size={20} color="gray" style={styles.searchIcon} onPress={handleSearch} />
            <TextInput
              placeholder="Search"
              style={styles.textInput}
              placeholderTextColor="#888"
              value={searchQuery}
              onChangeText={setSearchQuery}
              onSubmitEditing={handleSearch}
            />
          </View>

          {/* Login Icon / User Avatar */}
          {loggedIn ? (
            <TouchableOpacity onPress={() => setShowUserMenu((v) => !v)} style={styles.avatarButton}>
              <View
                style={[
                  styles.avatarCircle,
                  { backgroundColor: stringToColor(userName || userEmail || "User") },
                ]}
              >
                <Text style={styles.avatarInitial}>{userInitial}</Text>
              </View>
            </TouchableOpacity>
          ) : (
            <TouchableOpacity onPress={() => navigation.navigate("Login-Main1")} style={styles.loginIconHighlight}>
              <Ionicons name="person" size={28} color={"orange"} style={styles.loginIconGlow} />
            </TouchableOpacity>
          )}
        </View>

        {/* Logo */}
        <View style={styles.logoContainer}>
          <Image source={require("../../assets/images/Logo.jpg")} style={styles.logo} resizeMode="contain" />
        </View>

        {/* Ads Section */}
        <View style={styles.adsContainer}>
          <View style={styles.sectionTitleContainer}>
            <Text style={styles.sectionTitle}>Ads</Text>
          </View>
          {loadingAds ? (
            <ActivityIndicator size="large" color="#ff9500" />
          ) : (
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              {ads.map((url, index) => (
                <Image key={index} source={{ uri: url }} style={styles.adImage} />
              ))}
            </ScrollView>
          )}
        </View>

        {/* Features Section */}
        <View style={styles.featuresContainer}>
          <View style={styles.sectionTitleContainer}>
            <Text style={styles.sectionTitle}>Features</Text>
          </View>
          <View style={styles.featuresGrid}>
            {features.map((feature, index) => (
              <TouchableOpacity
                key={index}
                style={styles.featureItem}
                onPress={() => {
                  if (loggedIn) navigation.navigate(feature.route);
                  else Alert.alert("Login Required", "Please sign in to access this feature.");
                }}
              >
                <View style={styles.featureIconContainer}>
                  <Image source={feature.icon} style={styles.featureIcon} />
                </View>
                <Text style={styles.featureText}>{feature.name}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: "#fff" },
  container: { flexGrow: 1, backgroundColor: "#FED4A5", paddingBottom: 70, paddingTop: 50 },

  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    backgroundColor: "#ff9500",
    padding: 10,
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 0,
    elevation: 2,
  },

  searchContainer: {
    flex: 1,
    marginHorizontal: 10,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#fff",
    borderRadius: 20,
    paddingHorizontal: 10,
  },
  searchIcon: { marginRight: 8 },
  textInput: { flex: 1, height: 40, fontSize: 16, color: "#333" },

  logoContainer: {
    alignItems: "center",
    marginVertical: 0,
    borderWidth: 10,
    borderColor: "#ff9500",
    borderBottomLeftRadius: 12,
    borderBottomRightRadius: 12,
    padding: 0,
    position: "relative",
    backgroundColor: "#fff",
  },
  logo: { width: 380, height: 400, borderRadius: 40 },

  adsContainer: { marginVertical: 15, paddingHorizontal: 16, marginBottom: 20 },
  sectionTitleContainer: {
    backgroundColor: "#ff9500",
    borderRadius: 8,
    paddingVertical: 4,
    paddingHorizontal: 8,
    alignSelf: "flex-start",
    marginBottom: 8,
  },
  sectionTitle: { fontSize: 18, fontWeight: "bold", color: "#fff" },
  adImage: { width: 150, height: 100, marginRight: 8, borderRadius: 8, borderWidth: 1, borderColor: "#ddd" },

  featuresContainer: { paddingHorizontal: 16 },
  featuresGrid: { flexDirection: "row", flexWrap: "wrap", justifyContent: "space-between" },
  featureItem: { alignItems: "center", width: "30%", marginBottom: 20 },
  featureIconContainer: {
    backgroundColor: "#ff95001a",
    padding: 16,
    borderRadius: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
    marginBottom: 6,
  },
  featureIcon: { width: 60, height: 60 },
  featureText: { fontSize: 14, fontWeight: "bold", textAlign: "center", color: "#333" },

  // Avatar and user menu
  avatarButton: { paddingHorizontal: 2 },
  avatarCircle: {
    width: 32,
    height: 32,
    borderRadius: 16,
    alignItems: "center",
    justifyContent: "center",
  },
  avatarInitial: { color: "#fff", fontWeight: "bold", fontSize: 16 },

  // Highlight for login icon when not logged in
  loginIconHighlight: {
    padding: 2,
    borderRadius: 160,
    shadowColor: "#000000", // yellow glow
    shadowOpacity: 100,
    shadowRadius: 100,
    shadowOffset: { width: 0, height: 0 },
    elevation: 12, // Android shadow
  },
  loginIconGlow: {
    textShadowColor: "#000000",
    textShadowOffset: { width: 0, height: 0 },
    textShadowRadius: 8,
  },

  menuOverlay: {
    position: "absolute",
    top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: "transparent",
    zIndex: 10,
  },
  userMenu: {
    position: "absolute",
    right: 12,
    top: 70, // just under the header
    backgroundColor: "#fff",
    borderRadius: 8,
    paddingVertical: 8,
    paddingHorizontal: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 6,
    zIndex: 11,
    minWidth: 180,
  },
  userMenuTitle: {
    fontSize: 14,
    color: "#333",
    marginBottom: 8,
    fontWeight: "600",
  },
  userMenuItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 8,
  },
  userMenuItemText: {
    fontSize: 16,
    color: "#d00",
    fontWeight: "600",
  },
});

export default HomePage;